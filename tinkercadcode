int alarmPin = 2; // outputpin for led
int buttonPin = 4; // inputpin for pushbutton
int pirPin = 5; // inputpin for pir sensor
int ultratrigPin = 3; // inputpin for ultrasonic trigger pin
int ultraechoPin = 6; // inputpin for ultrasonic echo pin

int buttonState = 0;
int pirState = 0;
long duration = 0;
int distance = 0; // global variables here is fine since it is a small program

boolean alarmSensors[3];

void setup(){
  pinMode(alarmPin, OUTPUT); // defining that the variable storing the pin is to be an output
  pinMode(buttonPin, INPUT); // defining that the variable storing the pin is to be an input
  pinMode(ultratrigPin, OUTPUT);
  pinMode(ultraechoPin, INPUT); // defining that the variable storing the pin is to be an input
  pinMode(pirPin, INPUT); // defining that the variable storing the pin is to be an input
  Serial.begin(9600); // opens a 9600 bit communication lane over the usb data line
}

void sensorRead(){
  alarmSensors[0] = buttonRead();
  alarmSensors[1] = ultraRead();
  alarmSensors[2] = pirRead();
}

boolean buttonRead(){
  buttonState = digitalRead(buttonPin);
  if (buttonState == HIGH){
    return 1;
  } else {
    return 0;
  }
}


boolean pirRead(){
  pirState = digitalRead(pirPin);
  if (pirState == HIGH){
    return 1;
  } else {
    return 0;
  }
}


boolean ultraRead(){
  digitalWrite(ultratrigPin, LOW); // Clears the trigPin condition
  delayMicroseconds(2);
  digitalWrite(ultratrigPin, HIGH); // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  delayMicroseconds(10);
  digitalWrite(ultratrigPin, LOW);

  duration = pulseIn(ultraechoPin, HIGH); // Reads the echoPin, returns the sound wave travel time in microseconds
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)

  if (distance < 150){
    return 1;
    delay(150);
  } else {
    return 0;
  }
}

void sensorOutput(){
  Serial.print(alarmSensors[0]);
  Serial.print(",");
  Serial.print(alarmSensors[1]);
  Serial.print(",");
  Serial.print(alarmSensors[2]);
  Serial.println();
}

void loop(){
  sensorRead();
  sensorOutput();
  alarmActivate();
}

void alarmActivate(){
 int trigger = alarmSensors[0] + alarmSensors[1] + alarmSensors[2];
    if (trigger >= 2) {
      digitalWrite(alarmPin, HIGH);
    } else {
      digitalWrite(alarmPin, LOW);
    }
}
