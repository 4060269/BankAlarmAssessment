int alarmPin = 2; // outputpin for led
int pushbuttonPin = 4; // inputpin for pushbutton
int pirPin = 5; // inputpin for pir sensor
int ultratrigPin = 3; // inputpin for ultrasonic trigger pin
int ultraechoPin = 6; // inputpin for ultrasonic echo pin
long duration = 0;
int distance = 0;


void setup() {
  pinMode(alarmPin, OUTPUT); // defining that the variable storing the pin is to be an output
  pinMode(pushbuttonPin, INPUT); // defining that the variable storing the pin is to be an input
  pinMode(ultratrigPin, OUTPUT);
  pinMode(ultraechoPin, INPUT); // defining that the variable storing the pin is to be an input
  pinMode(pirPin, INPUT); // defining that the variable storing the pin is to be an input
  Serial.begin(9600); // opens a 9600 bit communication lane over the usb data line
}

// all of the logic to activate the pushbutton
boolean pushbuttonState() {
  int pushbuttonState = digitalRead(pushbuttonPin);
  if (pushbuttonState == HIGH) {
    Serial.println("Button activated!");
    return true;
    delay(150);
  } else {
    return false;
  }
}

  // all of the logic to activate the pir sensor
boolean pirState() {
  int pirState = digitalRead(pirPin);
  if (pirState == HIGH) {
    Serial.println("PIR activated!");
    return true;
    delay(150);
  } else {
    return false;
  }
}


// function to read the distance and return a boolean value
// all of the logic to activate the ultrasonic sensor
boolean ultraState() {
  int distanceThreshold = 150;
  digitalWrite(ultratrigPin, LOW); // Clears the trigPin condition
  delayMicroseconds(2);
  digitalWrite(ultratrigPin, HIGH); // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  delayMicroseconds(10);
  digitalWrite(ultratrigPin, LOW);

  duration = pulseIn(ultraechoPin, HIGH); // Reads the echoPin, returns the sound wave travel time in microseconds
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)

  if (distance < distanceThreshold) {
    Serial.println("Ultrasonic activated!");
    return true;
    delay(150);
  } else {
    return false;
  }
}

read

  void alarmActivate() {
    if (pushbuttonState && pirState == true) {
      digitalWrite(alarmPin, HIGH);
    } else if (pushbuttonState && distance == true) {
      digitalWrite(alarmPin, HIGH);

    } else if (pirState && distance == true) {
      digitalWrite(alarmPin, HIGH);

    } else {
      digitalWrite(alarmPin, LOW);
    }
  }
